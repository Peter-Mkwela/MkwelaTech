// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  email         String    @unique
  name          String?
  phone         String?
  password      String?
  role          UserRole  @default(CLIENT)
  avatar        String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  orders Order[]
  payments Payment[]
  supportTickets SupportTicket[]
  supportTicketMessages SupportTicketMessage[]
  downloads Download[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Service {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float
  duration    String
  category    String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  orders Order[]

  @@map("services")
}

model Order {
  id          String      @id @default(cuid())
  orderNumber String      @unique
  serviceId   String
  userId      Int
  status      OrderStatus @default(PENDING)
  priority    Priority    @default(MEDIUM)
  description String?
  deadline    DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  service Service  @relation(fields: [serviceId], references: [id])
  user    User     @relation(fields: [userId], references: [id])
  payment Payment?

  @@map("orders")
}

model Payment {
  id            String        @id @default(cuid())
  paymentId     String        @unique
  orderId       String        @unique
  userId        Int
  amount        Float
  currency      String        @default("USD")
  status        PaymentStatus @default(PENDING)
  method        PaymentMethod
  transactionId String?
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model SupportTicket {
  id          String       @id @default(cuid())
  ticketId    String       @unique
  userId      Int
  subject     String
  description String
  status      TicketStatus @default(OPEN)
  priority    Priority     @default(MEDIUM)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  user     User                   @relation(fields: [userId], references: [id])
  messages SupportTicketMessage[]

  @@map("support_tickets")
}

model SupportTicketMessage {
  id        String   @id @default(cuid())
  ticketId  String
  userId    Int
  content   String
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())

  ticket SupportTicket @relation(fields: [ticketId], references: [id])
  user   User          @relation(fields: [userId], references: [id])

  @@map("support_ticket_messages")
}

model Download {
  id            String   @id @default(cuid())
  fileName      String
  filePath      String
  fileSize      Int
  fileType      String
  userId        Int
  description   String?
  downloadCount Int      @default(0)
  createdAt     DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@map("downloads")
}

// Enums
enum UserRole {
  CLIENT
  ADMIN
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  PAYPAL
  BANK_TRANSFER
  STRIPE
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  email     String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model ContactMessage {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  subject   String
  message   String
  createdAt DateTime @default(now())
}

